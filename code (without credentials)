
territory_list = [
'Canada',
'Spain',
'EMEA - ROM',
'Benelux',
'France',
'Germany',
'Italy',
'United States',
'United Kingdom',
'ANZ',
'Latin America',
'China',
'Asia - Rest of Asia',
'Japan']

# define type of function to search: exponential decay function with forward fill approach
def model_func(x, a, k, b):
    return a * np.exp(-k * x) + b
appended_data = []
for x in territory_list:
    cur = conn.cursor().execute(
    "select * from sandbox.trung.bl3_dau_target_forecasts where territory_name = '%s' order by 1,2 ;" % x)
    df = cur.fetchall()
    df = pd.DataFrame(df)
    column_header = ['days after launch', 'territory name', 'date', 'dau target', 'dau act']
    df.columns = column_header
    x = df['days after launch']
    y = df['dau act'].fillna(method = 'ffill')
    opt, pcov = curve_fit(model_func, x, y, maxfev=5000)
    a, k, b = opt
    # test result
    x2 = x
    y2 = model_func(x2, a, k, b)
    df['dau forecast 1'] = y2
    df['dau forecast 2'] = (df['dau forecast 1']*0.5 + df['dau target']*0.5) - (df['dau forecast 1']*0.4)
    appended_data.append(df)
appended_data = pd.concat(appended_data)
print(appended_data)
appended_data.to_csv(r'C:\Users\Trung.Pham\Downloads\bl3_dau_forecasts.csv', index = False)
